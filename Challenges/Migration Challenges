# Blueprint Migration Challenges & Solution Framework

## Four-Bucket Migration Issue Classification System

### 1. Microsoft Limitation (Target Platform Constraint)
**Definition:** Limitations or quirks in Power Automate Desktop (PAD) that Blueprint cannot change

**Analogy:** *"If the port you ship containers to only has one-size cranes, every shipment has to be unpacked that way. We don't control the port."*

**Customer Positioning:** *"Blueprint can't bypass PAD's rules — we ensure your process still runs within those constraints."*

**Examples:**
- PAD treats all variables as global → Blueprint prefixes them to avoid collisions
- PAD requires XML parent nodes, unlike A360
- PAD requires browser scope when launching Chrome as an application
- PAD enforces mostly linear workflows vs. non-linear source platforms

### 2. Source Code Differences (Customer-Originated)
**Definition:** Inefficiencies or shortcuts in original bot that get faithfully preserved in migration

**Analogies:** 
- *"Blueprint is like Google Translate for bots. If a sentence had typos or was awkward in the original, it will carry those traits in the translation too."*
- *"Blueprint is like a mover that moves everything from one house to another. If a container had extra junk inside, it all gets shipped. We don't sort or clean — that's not our job."*

**Customer Positioning:** 
- *"What you're seeing here is exactly what was in your source bot. Blueprint doesn't add or remove logic — we migrate 1:1 so you don't lose functionality."*
- *"If the source bot had inefficiencies (e.g., everything marked as input/output, browser launched as app instead of browser), you'll see those inefficiencies carried over. That's intentional, not a bug — it guarantees nothing is lost."*

**Examples:**
- All arguments marked as input/output, doubling variables in PAD
- Launching Chrome as program instead of browser, causing selector mismatches
- Poor scoping or hard-coded assumptions in source bot logic

### 3. Blueprint Enhancement (Our Ongoing Improvements)
**Definition:** Areas where Blueprint could improve handling, but requires investigation and iteration

**Analogy:** *"Think of us as mechanics. Most of the time we follow manufacturer rules, but sometimes we can tune the engine to get better performance."*

**Customer Positioning:** *"Some things are in our control, and we're actively optimizing. We'll log this case and update you as we improve."*

**Examples:**
- Improving detection of Chrome launches so browser scope isn't missed
- Reducing redundant wrapper subflows in certain conditions
- Fixing SAP element migration bug (known and being worked on)

### 4. SI Ineptitude (Human Error/Process Issues)
**Definition:** Issues stemming from Service Integrator team members' lack of technical skill, platform knowledge, or motivation to properly test/use Blueprint

**Two Sub-Categories:**

**4a. SI Technical Skill Gaps**
- Don't know Power Automate Desktop capabilities/syntax
- Don't understand source RPA platform (UiPath/Blue Prism/A360) 
- Assume generated code won't work because "it's not how I would write it"
- Raise issues about things that actually do work fine

**4b. SI Motivation/Process Issues**
- No desire to actually test the tool before raising concerns
- Refuse to try the product despite having purchased it
- Want Blueprint to pre-validate every scenario instead of testing themselves
- Elongate sales/implementation cycles by avoiding hands-on evaluation

**Customer Positioning Approach:**
- **Set Expectations:** "Generated code won't look like hand-written code because it needs to work for bots from many different organizations and solutions"
- **Redirect to Testing:** "Have you tried it? You have the product and paid for it."
- **Validate Through Demo:** Walk through that the product does indeed work as designed
- **Educational Approach:** Explain why Blueprint's approach is necessarily different from manual coding

**Common Examples:**
- Customer shows sample bot, asks "how would you migrate this?" without having attempted migration themselves
- SI assumes migration will fail based on code appearance without functional testing
- Technical objections to working functionality because it doesn't match SI's preferred coding style
- Requests for pre-sales technical validation on tools already purchased and validated

**Frustration Factor:** Extremely high - elongates entire process after sales cycle completion and technical validation already occurred

## Major Technical Migration Challenges

### RPA Migration Technical Challenges

**Variable Scoping Mismatches**
- **Problem:** Power Automate Desktop only supports global variables, while UiPath and Automation 360 allow scoped variables
- **Impact:** Breaks migrations unless handled carefully
- **Blueprint Solution:** Auto-generates prefixed copies of variables at subflow entry points to mimic scoped behavior
- **Result:** 100-200% code increase, functionally correct but creates "garbage code"

**Linear vs. Non-Linear Workflows**
- **Problem:** Power Automate Desktop enforces mostly linear workflows, while UiPath/Blue Prism support non-linear branching
- **Early Impact:** Migrations produced unusable compiler errors
- **Blueprint Solution:** Worked with Microsoft to relax linearity rules and introduced flexible "go to" actions
- **Strategic Success:** Influenced Microsoft roadmap addition

**Unsupported/Gap Features in Power Automate**
- **Problem:** Missing native constructs (queues, reusable components, custom code)
- **Blueprint Solution:** Rules Engine enables custom mappings and reusable components, filling gaps in Microsoft's platform
- **Value:** Provides capabilities Microsoft hasn't built yet

### Enterprise Adoption Challenges

**Risk Aversion: "Why risk breaking what already works?"**
- **Challenge:** Customers hesitate to replace stable RPA bots with AI-driven or migrated solutions
- **Blueprint Solution:** Position migration/AI tools as optional accelerators, not forced changes
- **Approach:** Show value in incremental adoption (e.g., where AI simplifies work)

**On-Prem vs. Cloud Hosting Requirements**
- **Reality:** Many enterprises (like HSBC) demand on-prem deployments initially due to security reviews
- **Blueprint Solution:** Start on-prem, with migration path to hosted services later
- **Strategy:** Meet customers where they are, then evolve

**Customer Support Intensity**
- **Challenge:** Large enterprises (e.g., MetLife) attempting migration without system integrators require more direct handholding and success enablement
- **Blueprint Solution:** Increase Customer Success involvement, classroom training, and presales prep work
- **Recognition:** SI-free enterprise migrations need different support model

### AI Integration Challenges

**Bridging RPA to AI Agents**
- **Market Need:** Enterprises want future-proof AI integration but aren't ready to abandon RPA investments
- **Blueprint Solution:** "Add to agent" feature automatically creates APIs, flows, and Copilot actions so customers can experiment with AI while keeping RPA running
- **Value Proposition:** Bridge existing investments to future capabilities

**Balancing Innovation vs. Usability**
- **Risk:** Building "fluffy" AI features that look impressive but confuse users
- **Blueprint Solution:** Product philosophy: *"Clarity over confusion"* — hide complexity, make AI invisible, default to "just works"
- **Principle:** Functionality over flashiness

### Strategic/Business Tensions with Technology

**Integration of Assess with Migration**
- **Risk:** Bundling Assess fully into migration could alienate service providers (who rely on its lower-cost standalone licensing)
- **Blueprint Solution:** Hybrid licensing model recommended — keep Assess upsell while maintaining separate service-provider pricing
- **Balance:** Product integration vs. business model protection

**Microsoft Dependency Management**
- **Challenge:** Roadmaps lock for 6–12 months, making it difficult for Blueprint to respond quickly when customer migrations hit technical blockers
- **Blueprint Solution:** Direct engineering relationship with Microsoft to influence roadmap and jointly solve API gaps
- **Strategy:** Proactive partnership to reduce reactive blockers

## Quick Reference: Greatest Hits of Re-Explained Issues

**Most Frequently Explained Technical Issues:**
1. Variable scope + workflow linearity mismatches
2. Gaps in Power Automate requiring Blueprint's Rules Engine
3. Customer risk aversion and on-prem requirements
4. Need for handholding in SI-free enterprise migrations
5. Balancing AI innovation with practical usability
6. Managing Microsoft dependency and service-provider pricing dynamics

**Key Positioning Themes:**
- **Preserve functionality:** 1:1 migration guarantees nothing is lost
- **Work within constraints:** Blueprint optimizes within PAD's rules
- **Bridge investments:** Connect current RPA to future AI capabilities
- **Clarity over confusion:** Hide complexity, prioritize usability
